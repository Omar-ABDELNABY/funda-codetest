@{
    ViewData["Title"] = "Home";
}
<div class="container py-4">

    <h1 class="display-6 mb-4">Top Brokers</h1>

    <!-- Nav tabs -->
    <ul class="nav nav-tabs" id="brokersTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="all-tab" data-bs-toggle="tab" data-bs-target="#all" type="button" role="tab" aria-controls="all" aria-selected="true">
                All
                <span id="countBadgeAll" class="badge text-bg-secondary ms-1">–</span>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="garden-tab" data-bs-toggle="tab" data-bs-target="#garden" type="button" role="tab" aria-controls="garden" aria-selected="false">
                With Garden
                <span id="countBadgeGarden" class="badge text-bg-secondary ms-1">–</span>
            </button>
        </li>
    </ul>

    <!-- Tab contents -->
    <div class="tab-content pt-3" id="brokersTabContent">
        <!-- All brokers -->
        <div class="tab-pane fade show active" id="all" role="tabpanel" aria-labelledby="all-tab">
            <div id="loadingAll" class="d-flex align-items-center mb-3 d-none">
                <div class="spinner-border me-2" role="status" aria-hidden="true"></div>
                <span>Loading brokers…</span>
            </div>
            <div class="table-responsive d-none" id="tableWrapAll">
                <table class="table table-striped table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th scope="col" style="width:70px;">#</th>
                            <th scope="col">Broker</th>
                            <th scope="col">Broker ID</th>
                            <th scope="col" class="text-end">Listings</th>
                        </tr>
                    </thead>
                    <tbody id="brokersBodyAll"></tbody>
                </table>
            </div>
            <div id="emptyStateAll" class="alert alert-info d-none">No brokers found.</div>
        </div>

        <!-- Garden brokers -->
        <div class="tab-pane fade" id="garden" role="tabpanel" aria-labelledby="garden-tab">
            <div id="loadingGarden" class="d-flex align-items-center mb-3 d-none">
                <div class="spinner-border me-2" role="status" aria-hidden="true"></div>
                <span>Loading brokers with garden…</span>
            </div>
            <div class="table-responsive d-none" id="tableWrapGarden">
                <table class="table table-striped table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th scope="col" style="width:70px;">#</th>
                            <th scope="col">Broker</th>
                            <th scope="col">Broker ID</th>
                            <th scope="col" class="text-end">Listings</th>
                        </tr>
                    </thead>
                    <tbody id="brokersBodyGarden"></tbody>
                </table>
            </div>
            <div id="emptyStateGarden" class="alert alert-info d-none">No garden brokers found.</div>
        </div>
    </div>
</div>

@section Scripts {
<script>
async function loadBrokers({ withGarden, tbodyId, tableWrapId, emptyStateId, countBadgeId, loadingId }) {
    const loading = document.getElementById(loadingId);
    const tableWrap = document.getElementById(tableWrapId);
    const tbody = document.getElementById(tbodyId);
    const emptyState = document.getElementById(emptyStateId);
    const countBadge = document.getElementById(countBadgeId);

    // If already loaded once, skip
    if (tableWrap.dataset.loaded === "true" || emptyState.dataset.loaded === "true") return;

    loading.classList.remove('d-none');

    try {
        const resp = await fetch(`/api/brokers/top?withGarden=${withGarden}`, { headers: { 'Accept': 'application/json' } });
        const data = await resp.json();

        if (!Array.isArray(data) || data.length === 0) {
            emptyState.classList.remove('d-none');
            emptyState.dataset.loaded = "true";
            countBadge.textContent = '0';
            return;
        }

        data.forEach((item, idx) => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <th scope="row">${idx + 1}</th>
                <td class="fw-medium">${item.makelaarNaam}</td>
                <td><code>${item.makelaarId}</code></td>
                <td class="text-end">${item.listingCount}</td>
            `;
            tbody.appendChild(tr);
        });

        countBadge.textContent = data.length;
        tableWrap.classList.remove('d-none');
        tableWrap.dataset.loaded = "true";
    } catch (e) {
        emptyState.textContent = 'Failed to load brokers.';
        emptyState.classList.remove('d-none');
        emptyState.dataset.loaded = "true";
    } finally {
        loading.classList.add('d-none');
    }
}

document.addEventListener('DOMContentLoaded', () => {
    // Load "All" by default
    loadBrokers({
        withGarden: false,
        tbodyId: "brokersBodyAll",
        tableWrapId: "tableWrapAll",
        emptyStateId: "emptyStateAll",
        countBadgeId: "countBadgeAll",
        loadingId: "loadingAll"
    });

    // Attach tab shown handler for lazy load
    const gardenTab = document.getElementById('garden-tab');
    gardenTab.addEventListener('shown.bs.tab', () => {
        loadBrokers({
            withGarden: true,
            tbodyId: "brokersBodyGarden",
            tableWrapId: "tableWrapGarden",
            emptyStateId: "emptyStateGarden",
            countBadgeId: "countBadgeGarden",
            loadingId: "loadingGarden"
        });
    });
});
</script>
}
